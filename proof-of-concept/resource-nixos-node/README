Contained is part of a proof of concept implementation of the
`nixos_node` resource.

Ideally this provider would read the hardware-configuration.nix off
the remote server in to the `.tfstate` and then write it out to a
local file. However, since it is not a proper provider it cannot write
to the tfstate. Thus, we use a local cache directory as a stand-in for
the tfstate.

In `setup-nixops.sh` is a script to copy data from a server to a local
cache directory. Again, this is to pretend it is the tfstate.

In stage-one.tf.next, we complete the second half of pretending to be
a provider.

The example here is as if the user wrote

    provider "nixops" {
      nixops_root = "./my-nixops-repo"
    }

    resource "nixos_node" "web_frontend" {
      ip = "1.17.71.1";
      config = <<NIX
        role.webfrontend.enable = true;
      NIX
    }

The following loads in the hardware-configuration.nix data from the
cache and loads it in to memory, as if it were in the tfstate and
accessible from the tfstate during run time:

    data "local_file" "nixops_web_frontend_hardware_config_data" {
        filename = "./my-nixops-repo/terraform/.cache/web_frontend/hardware-configuration.nix"
    }

The following then writes the data from memory to disk where the
nixops network is configured to be:

    resource "local_file" "nixops-web_frontend-hardware-configuration" {
         filename = "./my-nixops-repo/terraform/web_frontend/hardware-configuration.nix"
         content = "${data.local_file.nixops_web_hardware_config_data.content}"
    }

And, completing the resource, we write the instance's default.nix and
terraform.nix:

    resource "local_file" "nixops-web_frontend-default-nix" {
         filename = "./my-nixops-repo/terraform/web_frontend/default.nix"
         content = <<CONTENT
           { imports = [ ./hardware-configuration.nix ./terraform.nix ];
             deployment.targetHost = "1.17.71.1";
           }
         CONTENT
    }

    resource "local_file" "nixops-web_frontend-terraform-nix" {
         filename = "./my-nixops-repo/terraform/web_frontend/terraform.nix"
         content = <<CONTENT
           {
             role.webfrontend.enable = true;
           }
         CONTENT
    }
